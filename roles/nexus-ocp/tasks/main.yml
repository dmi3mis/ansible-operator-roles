---
# Set up Nexus

- name: Check for valid Nexus image tag
  when: nexus_ocp_state == 'present'
  assert:
    that:
    - nexus_ocp_image_tag is not match('latest')
    fail_msg: "Due to the frequent changes in the Nexus container image, 'latest' is not a valid image tag. Please use a specific version starting with 3.30.0."
    quiet: true

- name: Check for supported Nexus image version
  when: nexus_ocp_state == 'present'
  assert:
    that:
    - nexus_ocp_image_tag is version_compare('3.30', '>=')
    fail_msg: "Minimum supported Nexus Version is 3.30."
    quiet: true

- name: Set OpenShift Objects for Nexus to {{ nexus_ocp_state }}
  community.kubernetes.k8s:
    state: "{{ nexus_ocp_state }}"
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - service_account.j2
  - service.j2
  - registry_service.j2
  - route.j2
  - registry_route.j2
  - persistent_volume_claim.j2

- name: Set Nexus Deployment to {{ nexus_ocp_state }}
  community.kubernetes.k8s:
    state: "{{ nexus_ocp_state }}"
    definition: "{{ lookup('template', 'deployment.j2' ) | from_yaml }}"

- name: Wait until Nexus pod is ready
  when: nexus_ocp_state == "present"
  community.kubernetes.k8s_info:
    api_version: apps/v1
    kind: Deployment
    namespace: "{{ nexus_ocp_namespace }}"
    name: "{{ nexus_ocp_name }}"
  register: r_nexus_deployment
  until:
  - r_nexus_deployment.resources | length | int > 0
  - r_nexus_deployment.resources[0].status.readyReplicas is defined
  - r_nexus_deployment.resources[0].status.readyReplicas | int == r_nexus_deployment.resources[0].spec.replicas | int
  retries: 40
  delay: 5
  ignore_errors: yes

# Get Nexus Route
- name: Get Nexus Route Hostname
  when: nexus_ocp_state == "present"
  community.kubernetes.k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: "{{ nexus_ocp_name }}"
    namespace: "{{ nexus_ocp_namespace }}"
  register: r_route

- name: Store Nexus Route Hostname
  when: nexus_ocp_state == "present"
  set_fact:
    nexus_ocp_actual_route: "{{ r_route.resources[0].status.ingress[0].host }}"

- name: Get Nexus CR
  community.kubernetes.k8s_info:
    api_version: gpte.opentlc.com/v1
    kind: Nexus
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: r_nexus

- name: Perform Initial Nexus Configuration
  when: r_nexus.resources[0].status.admin_password is not defined
  include_tasks: ./setup.yml
  vars:
    nexus_url: "{{ 'http' if not nexus_ocp_ssl | default( False ) | bool else 'https' }}://{{ nexus_ocp_actual_route }}"
